<?php

// $Id$

include_once("tested.php.inc");
include_once(drupal_get_path('module', 'gratcore') . '/gratcore.php.inc');
include_once('ascott_lnk.php.inc');
include_once('si3c_lnk.php.inc');

define(_TABLE_COLLAUDI, 'principale_di_collaudo');
define(_ITEMS_COLLAUDI, 'apparecchiature_per_ordine');

function tested_init() {
    drupal_add_css(drupal_get_path('module', 'tested') . '/tested.css', 'module');
//    drupal_add_js(drupal_get_path('module', 'tested') . '/js/d3/d3.js','module');
//    drupal_add_js(drupal_get_path('module', 'tested') . '/js/tested.js','module');
}

function tested_help($path, $arg) {
    $output = '';
    switch ($path) {
        case "admin/help#request":
            return '<p>' . t("modulo per la gestione dei collaudi") . '</p>';
        case "search/tested#noresults":
            return "<ul>
                <li>la ricerca per numero d'inventario richiede un formato nnnn/mmmmmmm. <br/> <i>es. 2008/12345678</i><br/> Non importa quanti numeri dopo il separatore '/'</li>
                <li>la ricerca per ettichetta richiede solo un formato numerico. Non vanno inserite le prime 4 cifre dell'ettichetta ( di solito 1004 o 1011) </li>
                <ul>";
    }
    return $output;
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the onthisdate module
 */
function tested_perm() {
    return tested_permission();
}

function tested_access($op, $node) {
    global $user;

    switch ($op) {
        case 'create':
            return (user_access(_INSERT_TESTED) || user_access(_MANGE_TESTED) );
            break;
        case 'delete':
            return (($user->uid == $node->uid && user_access(_DELETE_TESTED)) || user_access(_MANGE_TESTED) );
            break;
        case 'update':
            return(user_access(_MODIFY_TESTED) || user_access(_MANGE_TESTED) );
            break;
        case 'view' :
            return(($user->uid == $node->uid) || user_access(_MANGE_TESTED) || user_access(_VIEW_TESTED) );
            break;
        default:
            return FALSE;
    }
    return FALSE;
}

function tested_cron() {
    include_once('import.php.inc');
    global $user;
    $u = $user;
    $user = user_load(array('uid' => 12));
    $qy = "SELECT DISTINCT  n.nid as nid, r.rcq_status as status, UNIX_TIMESTAMP(c.data_collaudo) as date,
        c.nid as t_nid
        FROM apparecchiature_per_ordine a
        INNER JOIN principale_di_collaudo c ON c.numero_ordine=a.numero_ordine
        INNER JOIN {node} n ON n.nid=a.nid
        INNER JOIN " . _REQUESTS_TABLE . " r ON r.nid=n.nid AND r.vid=n.vid
        WHERE r.rcq_status >=" . _APPROVED . " AND r.rcq_status<" . _TESTED . " AND NOT c.data_collaudo IS NULL";
    $qy = db_query($qy);
    while ($res = db_fetch_object($qy)) {
        update_rcq_status($res->nid, _TESTED, 'aggiornamento da collaudo');
//        set_status($res->nid, _TESTED);
//      db_query("UPDATE "._STATUS_TABLE." SET changed=".$res->date." WHERE nid=".$res->nid);
    }
    //trasferisce i file dei collaudi
    $qy = "SELECT DISTINCT  n.nid as nid,  UNIX_TIMESTAMP(c.data_collaudo) as date,
        c.nid as t_nid
        FROM principale_di_collaudo c 
        INNER JOIN {node} n ON n.nid=c.nid WHERE NOT c.data_collaudo IS NULL ";
    $qy = db_query($qy);
    while ($res = db_fetch_object($qy)) {
        $node = node_load($res->t_nid);
        file_transfert($node);
    }
    $user = $u;
    load_tested();
    include_once('risk-analyzer.php');
    cron_risk();
}

/* -----------------------------node part ----------------------------------------- */

function tested_node_name() {
    return 'tested';
}

function tested_node_info() {
    return array(
        'tested' => array(
            'name' => t('Collaudi'),
            'module' => 'tested',
            'description' => t("Scheda di inserimento collaudi"),
            'has_title' => TRUE,
            'title_label' => t('Collaudi'),
            'has_body' => TRUE,
            'body_label' => t('Info gestione collaudo;'),
        )
    );
}

function tested_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'control_button') {
        unset($form['tested']);
    }
    //aggiunge  la ricerca del numero d'ordine alla form di ricerca ID git
    if ($form_id == 'searchGratID') {
        $form['#submit'] = array('search_Tested_submit');
    }
}

/**
 * ricerca il numero d'ordine e se lo trova fa il redirect su di esso 
 * viceversa passa alla ricerca degli altri id GIT
 * @param type $form form origine
 * @param string $form_state  stato della formdi ritorno
 */
function search_Tested_submit($form, &$form_state) {
    $qy = db_query("SELECT nid FROM " . _TABLE_COLLAUDI . " WHERE numero_ordine=%d ORDER BY nid DESC", trim($form_state['values']['ID']));
    if ($nid = db_result($qy)) {
        $form_state['redirect'] = 'node/' . $nid;
    } else {
        // funzione di ricerca originale
        searchGratID_submit($form, &$form_state);
    }
}

function tested_insert($node) {
    global $user;

    $node->body = $node->sistema_apparecchiatura;
    $node->title = $node->sistema_apparecchiatura;
    // correzione date per compatibilità con access
    $node->data_ordine = set_date_array($node->data_ordine);
    $node->data_1a_installazione = set_date_array($node->data_1a_installazione);
    $node->data_verifiche_manutentore = set_date_array($node->data_verifiche_manutentore);
    $node->data_collaudo = set_date_array($node->data_collaudo);

    drupal_write_record(_TABLE_COLLAUDI, $node);
    //aggiorna le voci di collaudo indipendentemente dalla revisione
    foreach ($node->items as $item) {
        $item->main_nid = $node->nid; //sincronizza il riferimetnto per sostituire il numero d'ordine
        if ($item->ID == 'new' || !isset($item->ID) || $item->ID === NULL) {
            // nuova voce
            drupal_write_record(_ITEMS_COLLAUDI, $item);
        } else {
            // voce esistente
            drupal_write_record(_ITEMS_COLLAUDI, $item, 'ID');
        }
    }
}

function tested_update($node) {
    global $user;

    if ($node->revision)
        tested_insert($node);
    else {
        $node->body = $node->sistema_apparecchiatura;
        $node->title = $node->sistema_apparecchiatura;
        // correzione date per compatibilità con access
        $node->data_ordine = set_date_array($node->data_ordine);
        $node->data_1a_installazione = set_date_array($node->data_1a_installazione);
        $node->data_verifiche_manutentore = set_date_array($node->data_verifiche_manutentore);
        $node->data_collaudo = set_date_array($node->data_collaudo);

        drupal_write_record(_TABLE_COLLAUDI, $node, 'nid');
        //aggiorna le voci di collaudo 
        if (isset($node->items))
            foreach ($node->items as $item) {
                if (is_array($item))
                    $item = (object) $item;
                $item->main_nid = $node->nid; //sincronizza il riferimetnto per sostituire il numero d'ordine
                if ($item->ID == 'new' || !isset($item->ID) || $item->ID === NULL) {
                    // nuova voce
                    drupal_write_record(_ITEMS_COLLAUDI, $item);
                } else {
                    // voce esistente
                    drupal_write_record(_ITEMS_COLLAUDI, $item, 'ID');
                }
            }
    }
}

function tested_load($node) {
    $additions = db_fetch_object(
            db_query("SELECT
              `ID` ,
              sistema_apparecchiatura ,
              tipologia_sistema_apparecchiatura ,
              reparto_installazione ,
              tipo_acquisizione,
              prezzo_acquisto,
              numero_ordine,
              data_ordine ,
              n_order ,
              referente_amministrativo ,
              ditta_produttrice,
              ditta_fornitrice ,
              ditta_assistenza_tecnica,
              note_particolari ,
              note_acquisto ,
              data_consegna ,
              data_1a_installazione,
              data_verifiche_manutentore ,
              data_collaudo ,
              contatto_reparto ,
              ditta ,
              reparto ,
              verificatore,
              responsabile_sic ,
              note_sostituzione_apparecchiature ,
              note_manutenzione 
                FROM " . _TABLE_COLLAUDI . " 
                WHERE  nid=%d ", $node->nid));
    //nella query mancano  il vid e il nid che potrebbero  sovrapporsi con quelli reali (il vid  è 0)
    // $additions->ditta_fornitrice=get_f_address($additions->ditta_fornitrice); 
    // $additions->ditta_assistenza_tecnica=get_f_address($additions->ditta_assistenza_tecnica);          
    $additions->test_status = get_status($node->nid);


    $qy = "SELECT * FROM " . _ITEMS_COLLAUDI . " WHERE numero_ordine=%d";
    $qy = db_query($qy, $additions->numero_ordine);
    while ($rs = db_fetch_object($qy)) {
        $additions->items[] = $rs;
    }
    /**
     */
    return $additions;
}

/**
 * recupera fornitore 
 * @param type $id id fornitore
 * @return string  stringa html dati fornitore
 */
function get_f_address($id) {
    $qy = "SELECT * FROM elenco_fornitori WHERE ID_Fornitore = %d";
    $qy = db_query($qy, $id);
    if ($r = db_fetch_object($qy)) {
        return $r->Fornitore . ' - ' . $r->Indirizzo . ' - ' . $r->CAP . ' ' . $r->citta .
                '<br/>tel.: <a href="tel:' . preg_replace('/[^+0-9]+/', '', $r->Telefono_1) . '">' . $r->Telefono_1 . '</a> 
                 <br/>fax.:<a href="fax:' . preg_replace('/[^+0-9]+/', '', $r->Telefax) . '">' . $r->Telefax . '</a> 
                <br/>mail:<a href=\"mailto:' . $r->email . '\">' . $r->email . '</a>';
    } else
        return '';
}

function tested_delete($node) {
// delete all custom nodes  setting status.
    db_query("DELETE FROM " . _TABLE_COLLAUDI . " WHERE nid=%d ", $node->nid, $node->vid);
    delete_status($node->nid);
}

function tested_view($node, $teaser = FALSE, $page = FALSE) {
    global $user;
    $node = node_prepare($node, $teaser);
    $f['nid'] = array(
        '#value' => $node->nid,
    );

    $f['sistema_apparecchiatura'] = array(
        '#title' => 'sistema o apparecchiatura',
        '#type' => 'item',
        '#value' => $node->sistema_apparecchiatura,
    );

    $qy = db_query('SELECT * FROM tipologia_apparecchiatura');
    while ($rs = db_fetch_object($qy)) {
        $options[$rs->ID] = $rs->tipo_apparecchiatura;
    }
    $f['tipologia_sistema_apparecchiatura'] = array(
        '#title' => 'tipo di sistema/apparecchiatura',
        '#type' => 'item',
        '#value' => $options[$node->tipologia_sistema_apparecchiatura],
    );
    $s = get_structure($node->reparto_installazione);
    $f['reparto_installazione'] = array(
        '#title' => 'reparto installazione',
        '#type' => 'item',
        '#value' => $s[0],
    );
    $s = array(); //segnposto per lo stato di tabella dei rischi
    include_once 'risk-analyzer.php';
    $node->content['risk'] = array(
        '#type' => 'fieldset',
        '#title' => 'tabella rischi ',
        '#collapsible' => TRUE,
        '#value' => '<small>' . risk_table($s, $node->{'numero ordine'}) . '</small>',
        '#weight' => $w++,
    );

    $qy = db_query('SELECT * FROM tipologia_acquisto');
    while ($rs = db_fetch_object($qy)) {
        $options[$rs->ID] = $rs->tipologia_acquisto;
    }
    $f['tipo_acquisizione'] = array(
        '#title' => 'tipo di acquisto (service comodato ecc.)',
        '#type' => 'item',
        '#value' => $options[$node->tipo_acquisizione],
    );

//    $f['prezzo_acquisto'] = array(
//        '#title' => 'Prezzo di acquisto',
//        '#type'=>'item',
//        '#value'=>$node->prezzo_acquisto,
//        '#element_validate'=>array('validate_integer'),
//        '#attributes'=>array('class'=>'integer'),
//        '#size'=>10,
//        '#suffix'=>'<b>&euro;</b>',
//    );
    $f['numero_ordine'] = array(
        '#title' => 'numero di pratica',
        '#type' => 'item',
        '#value' => $node->numero_ordine,
    );

    $f['data_ordine'] = array(
        '#title' => 'Data ordine',
        '#type' => 'item',
        '#value' => date_format(date_create($node->data_ordine), 'd.m.Y'),
    );

    $f['n_order'] = array(
        '#title' => 'Numero di ordine ASCOTT',
        '#type' => 'item',
        '#value' => $node->{'n_order'},
        '#attributes' => array('class' => 'integer'),
    );

    /* TODO: user selection    */
    $f['referente_amministrativo'] = array(
        '#title' => 'riferimento amministrativo della pratica',
        '#type' => 'item',
        '#value' => $node->referente_amministrativo,
    );


    $f['ditta_produttrice'] = array(
        '#title' => 'ditta produttrice',
        '#type' => 'item',
        '#value' => get_f_address($node->ditta_produttrice),
    );
    $f['ditta_fornitrice'] = array(
        '#title' => 'ditta fornitrice',
        '#type' => 'item',
        '#value' => get_f_address($node->ditta_fornitrice),
    );
    $f['ditta_assistenza_tecnica'] = array(
        '#title' => 'ditta assistenza tecnica',
        '#type' => 'item',
        '#value' => get_f_address($node->ditta_assistenza_tecnica),
    );
    $f['note_particolari'] = array(
        '#title' => 'note particolari',
        '#type' => 'item',
        '#value' => $node->{'note_particolari'},
    );
    $f['note_acquisto'] = array(
        '#title' => 'note acquisto',
        '#type' => 'item',
        '#value' => $node->note_acquisto,
    );
    $f['data_consegna'] = array(
        '#title' => 'consegna',
        '#description' => 'data o indicazione generica della presunta consegna',
        '#type' => 'item',
        '#value' => $node->data_consegna,
    );
    $f['data_1a_installazione'] = array(
        '#title' => 'data prima installazione',
        '#type' => 'item',
        '#value' => date_format(date_create($node->data_1a_installazione), 'd.m.Y'),
    );
    $f['data_verifiche_manutentore'] = array(
        '#title' => 'data verifiche manutentore',
        '#type' => 'item',
        '#value' => date_format(date_create($node->data_verifiche_manutentore), 'd.m.Y'),
    );
    $f['data_collaudo'] = array(
        '#title' => 'data termine collaudo e messa in funzione',
        '#type' => 'item',
        '#value' => date_format(date_create($node->data_collaudo), 'd.m.Y'),
    );
    $f['contatto_reparto'] = array(
        '#title' => 'contatto reparto',
        '#type' => 'item',
        '#value' => $node->contatto_reparto,
    );
    $f['ditta'] = array(
        '#title' => 'ditta',
        '#type' => 'item',
        '#value' => $node->{'ditta'},
    );
    $f['reparto'] = array(
        '#title' => 'reparto',
        '#type' => 'item',
        '#value' => $node->{'reparto'},
    );
    $f['verificatore'] = array(
        '#title' => 'verificatore',
        '#type' => 'item',
        '#value' => $node->{'verificatore'},
    );
    $f['responsabile_sic'] = array(
        '#title' => 'responsabile sic',
        '#type' => 'item',
        '#value' => $node->responsabile_sic,
    );
    $f['note_sostituzione_apparecchiature'] = array(
        '#title' => 'note sostituzione apparecchiature',
        '#type' => 'item',
        '#value' => $node->note_sostituzione_apparecchiature,
    );
    $f['note_manutenzione'] = array(
        '#title' => 'note manutenzione',
        '#type' => 'item',
        '#value' => $node->note_manutenzione,
    );


    $f['items']['#value'] = built_items_table($node); /* da correggere con in node id (nid) */
    $f['items']['#title'] = 'Apparecchiature collaudate';
    $f['items']['#type'] = 'fieldset';
    $f['items']['#collapsible'] = TRUE;
    $f['items']['#collapsed'] = TRUE;
    $f['items']['#tree'] = TRUE;
    $f['#theme'] = 'tested_view';
    $node->content = $f;

    return $node;
}

function built_items_table($node) {
//    $qy = "SELECT * FROM " . _ITEMS_COLLAUDI . " WHERE numero_ordine=%d";
//    $no = 'numero_ordine';
//    $res = db_query($qy, $node->numero_ordine);
    include_once 'risk-analyzer.php';
    $first = TRUE;
//    while ($row = db_fetch_array($res)) {
    foreach ($node->items as $item) {
        $rw = array();
        foreach ($item as $lab => $val) {
            if (in_array($lab, array('main_nid', 'ID', 'TIMESTAMP', 'numero_ordine')))
                continue;
            if ($first)
                $header[] = $lab == 'nid' ? 'richiesta' : preg_replace('/_/', ' ', $lab);
            if ($lab == 'etichetta_manutentore') {
                $rw[] = l($val, "tested/si3c/1004/$val");
                if (!is_null($val))
                    update_one_item($val, FALSE); //aggiorna la tabella dei rischi per una sola voce
            }
            if ($lab == 'nid') {
                //$title=db_result(db_query("SELECT title FROM {node} WHERE nid=%d",$val));
                $rw[] = nl($val);
            } else
                $rw[] = $val;
        }
        $first = false;
        $rows[] = $rw;
    }
    return theme('table', $header, $rows);
}

function tested_update_index() {
    $last = variable_get('node_cron_last', 0);
    $limit = (int) variable_get('search_cron_limit', 100);

    $result = db_query_range('SELECT n.nid, c.last_comment_timestamp FROM {node} n LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid
  			    WHERE n.status = 1 AND n.moderate = 0 AND (n.created > %d OR n.changed > %d OR c.last_comment_timestamp > %d)
  			    ORDER BY GREATEST(n.created, n.changed, c.last_comment_timestamp) ASC', $last, $last, $last, 0, $limit);

    while ($node = db_fetch_object($result)) {
        $last_comment = $node->last_comment_timestamp;
        $node = node_load(array('nid' => $node->nid));

        // We update this variable per node in case cron times out, or if the node
        // cannot be indexed (PHP nodes which call drupal_goto, for example).
        // In rare cases this can mean a node is only partially indexed, but the
        // chances of this happening are very small.
        variable_set('node_cron_last', max($last_comment, $node->changed, $node->created));

        // Get node output (filtered and with module-specific fields).
        if (node_hook($node, 'view')) {
            node_invoke($node, 'view', false, false);
        } else {
            $node = node_prepare($node, false);
        }
        // Allow modules to change $node->body before viewing.
        node_invoke_nodeapi($node, 'view', false, false);

        $text = '<h1>' . $node->title . '</h1><h1>' . $node->body . '</h1>';

        // Fetch extra data normally not visible
        $extra = node_invoke_nodeapi($node, 'update index');
        foreach ($extra as $t) {
            $text .= $t;
        }

        // Update index
        search_index($node->nid, 'node', $text);
    }
}

/* * ******************************************************************************************************
  SETTAGGIO AZIONI (TRIGGER)
 * ***************************************************************************************************** */

//TODO: implementare le azioni
function tested_action_info() {
    return array(
        'tested_done' => array(
            'description' => t('Tested DONE'),
            'type' => 'node',
            'configurable' => TRUE,
            'hooks' => array(
                'nodeapi' => array('insert', 'update'),
            )
        )
    );
}

function tested_done_action(&$node, $context) {
    
}

/* * ***************************************************************************************************** */

/* modyfy normal node fields to hide unused ones
  function request_form_aler(&$form, $form_state, $form_id){

  } */
/* -----------------------------BLOCK PART----------------------------------------- */

function tested_block($op = 'list', $delta = 0, $edit = array()) {
    
}

//function request_block()



/* ------------------------------------menu hook-----------------------------------
 * */

function tested_menu() {

    /*
      $items['tested/list'] = array(
      'title' => 'Tutti i collaudi',
      //'page callback' => 'drupal_get_form',
      'page callback' => 'filtered_list',
      //'page arguments' => array(2),
      'access arguments' => array( _VIEW_RCQ ),

      );
     */
    $items['admin/settings/tested'] = array(
        'title' => 'Impostazione modulo collaudi',
        'description' => 'configurazioni intestazioni a tabelle di interfacciamento e stringhe di connessione',
        'page callback' => 'admin_settings',
        'access arguments' => array(_MANGE_TESTED),
        'file' => 'admin_settings.php.inc',
    );
    $items['tested'] = array(
        'title' => 'Tutti i collaudi',
        'page callback' => 'tested_list',
        'access arguments' => array(_VIEW_TESTED),
    );
    $items['tested/import'] = array(
        'title' => 'Importa/aggiorna collaudi',
        //'page callback' => 'drupal_get_form',
        'page callback' => 'load_tested',
        //'page arguments' => array(2),
        'access arguments' => array(_MANGE_TESTED),
        'file' => 'import.php.inc',
    );
    $items['tested/risk/%'] = array(
        'title' => 'Tabelle di rischio',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('risk_admin_form', 2),
        'access arguments' => array(_VIEW_TESTED),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'risk-analyzer.php',
    );
    /*    $items['tested/ascott/%/%'] = array(
      'title' => 'Mostra dati ordine',
      //'page callback' => 'drupal_get_form',
      'page callback' => 'ascott_order',
      'page arguments' => array(2,3),
      'access arguments' => array( _MANGE_TESTED ),
      'file'=>'ascott_lnk.php.inc',
      'type' => MENU_LOCAL_TASK,

      );
     */
    $items['tested/si3c/%/%'] = array(
        'title' => 'Mostra dati Si<sup>3</sup>C',
        //'page callback' => 'drupal_get_form',
        'page callback' => 'test_si3c',
        'page arguments' => array(2, 3),
        'access arguments' => array(_VIEW_TESTED),
        'file' => 'si3c_lnk.php.inc',
        'type' => MENU_CALLBACK,
    );
    $items['tested/manutenzione'] = array(
        'title' => 'Mostra dati attività',
        //'page callback' => 'drupal_get_form',
        'page callback' => 'attivita_manutentiva',
        'access arguments' => array(_MANGE_TESTED),
        'file' => 'si3c_lnk.php.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['tested/controllo'] = array(
        'title' => 'Tempistiche manutentive',
        //'page callback' => 'drupal_get_form',
        'page callback' => 'controllo',
        'access arguments' => array(_VIEW_TESTED),
        'file' => 'gestione_manutenzione.php',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['tested/controllo/%'] = array(
        'title' => 'Lista interventi',
        //'page callback' => 'drupal_get_form',
        'page callback' => 'show_details',
        'page arguments' => array(2),
        'access arguments' => array(_VIEW_TESTED),
        'file' => 'gestione_manutenzione.php',
        'type' => MENU_CALLBACK,
    );
    $items['tested/preventiva/%/%/%'] = array(
        'title' => 'Lista interventi',
        //'page callback' => 'drupal_get_form',
        'page callback' => 'planned_maintenance_detail',
        'page arguments' => array(2, 3, 4),
        'access arguments' => array(_VIEW_TESTED),
        'file' => 'gestione_manutenzione.php',
        'type' => MENU_CALLBACK,
    );
    $items['tested/programmata/%'] = array(
        'title' => 'Manutenzioni programmate',
        //'page callback' => 'drupal_get_form',
        'page callback' => 'sommario_programmate',
        'page arguments' => array(2),
        'access arguments' => array(_VIEW_TESTED),
        'file' => 'gestione_manutenzione.php',
        'type' => MENU_CALLBACK,
    );
    /*
      $items['tested/plug-in/%tested_plugin'] = array(
      'title' => 'Mostra dati su altri sistemi',
      'access arguments' => array( _VIEW_TESTED ),
      'type' => MENU_LOCAL_TASK,
      );
     */
    $items['tested/autocomplete/%'] = array(
        'title' => 'ricerca automatica',
        'page callback' => 'autocomplete_items',
        'page arguments' => array(2),
        'access arguments' => array(_MODIFY_TESTED),
        'type' => MENU_LOCAL_TASK,
    );
    $items['tested/js/items'] = array(
        'title' => 'Modifica voci di collaudo',
        'page callback' => 'tested_load_items_js',
        'access arguments' => array(_MODIFY_TESTED),
        'type' => MENU_CALLBACK,
    );
    $items['tested/plot/%/%'] = array(
        'title' => 'ajax plot',
        'page callback' => 'ajax_plot',
        'file' => 'si3c_lnk.php.inc',
        'page arguments' => array(2, 3),
        'access arguments' => array(_VIEW_TESTED),
        'type' => MENU_CALLBACK,
    );
    $items['tested/canone'] = array(
        'title' => 'Tabelle canoni',
        'page callback' => 'tabella_canone',
        'access arguments' => array(_VIEW_TESTED),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'canone.php.inc',
    );
    $items['tested/canone/create'] = array(
        'title' => 'carica canoni',
        'page callback' => 'init_data',
        'access arguments' => array(_MANGE_TESTED),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'canone.php.inc',
    );
    $items['tested/canone/destroy'] = array(
        'title' => 'cancella canoni',
        'page callback' => 'destroy_data',
        'access arguments' => array(_MANGE_TESTED),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'canone.php.inc',
    );
    $items['tested/canone/edit/%'] = array(
        'title' => 'Modifica canoni',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fee_edit_form', 3),
        'access arguments' => array(_MANGE_TESTED),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'canone.php.inc',
    );
    return $items;
}

/**
 *  
 * @param string $item_category tipo di elemento da ricercare
 */

/**
 * ricerca per autocompletamento
 * @param string $item_category tipo di elemento da ricercare
 * @param string $search_string iniziali elemento da ricercare
 */
function autocomplete_items($item_category, $search_string) {
    $search_string = trim($search_string);
    $matches = array();

    if ($search_string == '' || strlen($search_string) < 2) {
        drupal_json($matches);
        return;
    }
    $search_string = '%' . preg_replace('/[[:space:]]+/', '%', $search_string) . '%';

    switch ($item_category) {
        case 'contatti':
            $qey = "SELECT ID_contatti as ID, cognome_nome as description
                 FROM elenco_contatti WHERE cognome_nome LIKE '%s' ";
            break;
        case 'fornitori':
            $qey = "SELECT ID_Fornitore as ID, fornitore as description
                 FROM elenco_fornitori WHERE fornitore LIKE '%s' ";
            break;
        default:
            break;
    }
    $qy = db_query_range($qey, 1, 21, array($search_string));
    while ($rs = db_fetch_object($qy)) {
        $matches[$rs->ID] = $rs->description;
    }
    drupal_json($matches);
}

function tested_theme() {
    $theme['admin_table_settings']['arguments']['form'] = NULL;
    $theme['admin_table_settings']['file'] = 'admin_settings.php.inc';
    // riferimento al template della scheda
    $theme['tested_node_form']['arguments']['form'] = NULL;
    $theme['tested_node_form']['template'] = 'tested_page';
    $theme['tested_view']['arguments']['form'] = NULL;
    $theme['tested_view']['template'] = 'tested_page';
    //$theme['tested_node_form']['preprocess functions'] = array('tested_preprocess');
    // riferimento al template lista attrezzature
    $theme['tested_items']['arguments']['form'] = array();
    $theme['tested_items']['template'] = 'tested_items';
//    $theme['tested_items']['preprocess functions'] = array('template_preprocess_tested_items');

    return $theme;
}

/* dispacer dei plugin ai db esterni
 * 
 */

function tested_plugin_to_arg($plugin, $map, $index) {
    if (array_shift($map) !== 'tested')
        return FALSE; // remove 'tested'
    if (array_shift($map) !== 'plug-in')
        return FALSE; // remove 'plug-in
    $plugin = array_shift($map);
    $function = array_shift($map);
    include_once($plugin . '.php.inc');
    if (function_exists($function)) {
        return call_user_func($function, $map);
    }
    return NULL;
}

/* hook di update della struttura*
 *
 */

function tested_structure_move($id_source, $id_destination) {
    $qy = 'SELECT DISTINCT nid FROM ' . _REQUESTS_TABLE . ' WHERE struct=%d';
    $res = db_query($qy, $id_source);
    while ($rs = db_fetch_object($res)) {
        $node = node_load($rs->nid);
        $node->struct = $id_destination;
        $src = get_structure($id_source);
        $dst = get_structure($id_destination);
        $node->log = 'Aggiornamento struttura da ' . $src[0] . ' a ' . $dst[0];
        node_save($node);
    }

//    db_query(
//       'UPDATE '._REQUESTS_TABLE.' SET struct=%d WHERE struct=%d',$id_destination,$id_source
//    );
}

function tested_nodeapi(&$node, $op, $a3, $a4) {
    global $user;
    //if ($node->type!='gare') return;
    switch ($node->type) {
        case 'request':
            add_request_tested_interface($node, $op, $a3, $a4);
            break;
    }
}

function add_request_tested_interface(&$node, $op, $a3, $a4) {
    global $user;
    switch ($op) {
        /*       case 'alter':break; // Html output ready we can alter it
          case 'presave': break;
          case 'delete':break;
          case 'delete revision':break;
          case 'load':break;
          case 'prepare':break;
          case 'prepare translation':break;
          case 'print':break;
          case 'search result':break;
          case 'update index':break;
          case 'validate':break;
         */
        case 'load':
            /* ///inserisce i riferimenti del collaudo al nodo cui è associata la richiesta
              $gid=get_aggregator($node->nid,'tested');
              if ($gid && ! isset($node->gare))$node->tested=$gid;
             *
             */
            $qy = "SELECT DISTINCT c.nid as nid FROM " . _ITEMS_COLLAUDI . "  i
                INNER JOIN " . _TABLE_COLLAUDI . " c ON c.numero_ordine=i.numero_ordine
                WHERE i.nid=%d";
            $qy = db_query($qy, $node->nid);
            while ($row = db_fetch_object($qy)) {
                $node->tested[] = $row->nid;
            }
            break;
        case 'insert':
        case 'update':
            break;
        case 'view':
            if (isset($node->tested)) { //inserisce il link alla gara a cui è associata la richiesta
                insert_aggregation($node->content, $node->tested, $a3);
            }
            break;
    }
}

/*  ---------------------- other functions ----------------------------------------- */

function tested_list() {
    return drupal_get_form('all_tested_form');
}

function all_tested_form() {
    $filter_join = '';
    if (user_access(_VIEW_TESTED) && !user_access(_MANGE_TESTED) && !user_access(_DELETE_TESTED) && !user_access(_INSERT_TESTED)) {
        // creazione del filtro per il reparto     solo per gli  utenti in visualizzazione
        global $user;
        // recupero strutture utente 
        $struct = (is_array($user->struct) ? $user->struct : array($user->struct));
        if (!in_array(0, $struct)) { //se non sono tutte le strutture
            // recupero degli item legati alle strutture , la join selezionerà solo 
            // i collauidi legati a questi item
            $filter_join = "INNER JOIN (SELECT DISTINCT main_nid 
                                                FROM " . _ITEMS_COLLAUDI . " 
                                                WHERE reparto IN (" . implode(',', $struct) . ")
                                        ) s ON s.main_nid = n.nid";
        }
        $new_items = array(); //non vengono caricate le indicazioni per i nuovi item
    } else {
        // i manager vedono se ci sono nuovi item
        $new_items = check_new_ascott_items();
    }
    $headers = array(
        array('data' => 'N.Ordine (id GIT)', 'field' => 'n_order'),
        array('data' => 'Oggetto', 'field' => 'title'),
        'item',
        array('data' => 'Aperto il', 'field' => 'n.created', 'sort' => 'desc'),
        array('data' => 'Collaudato il', 'field' => 'closed'),
    );
    $select = "SELECT n.title as title, c.numero_ordine as n_order,
                n.created as created, UNIX_TIMESTAMP(c.data_collaudo) as closed,
                i.count as count,
                n.nid as nid";

    $from = " FROM {node} n
        INNER JOIN " . _TABLE_COLLAUDI . " c ON c.nid=n.nid
        $filter_join
        LEFT JOIN (SELECT COUNT(numero_ordine) AS COUNT, numero_ordine FROM " . _ITEMS_COLLAUDI . " GROUP BY numero_ordine) i ON i.numero_ordine=c.numero_ordine
        WHERE n.type='tested' ";
    $res = pager_query($select . $from . tablesort_sql($headers), 100, 0, "SELECT COUNT(*) " . $from);
    //   $res=db_query($select.$from.tablesort_sql($headers));
    while ($db_row = db_fetch_object($res)) {
        $new_item = $new_items[$db_row->nid];
        $row = array();
        $row[] = array('data' => ($db_row->n_order . '<small> (' . $db_row->nid . ')</small>'),
            'style' => 'text-align: right;');
        if (is_array($new_item))
            $row[] = nl($db_row->nid) . '<span style="color: #ffae00;"> Nuovi inventari:' . ($new_item['items_checked'] - $new_item['items_found'] + 1) . "</span>";
        else
            $row[] = nl($db_row->nid);
        $row[] = array('data' => ($db_row->count),
            'style' => 'text-align: right;');
        $row[] = format_date($db_row->created, 'custom', 'd.m.Y');
        $row[] = ($db_row->closed ? format_date($db_row->closed, 'custom', 'd.m.Y') : 'in corso');

        $rows[] = $row;
    }
    $form['list'] = array('#value' => theme_pager() . " " . theme('table', $headers, $rows) . " " . theme_pager());
    return $form;
}

function tested_form(&$node) {
    global $user;
    $type = node_get_types('type', $node);
    /* non serve viene copiato da sistema-apparecchiatura
      $f['title']=array(
      '#type'=>'textfield',
      '#title'=>'collaudo',
      '#default_value'=>$node->title,
      );

      $f['body']=array(
      '#type'=>'textfield',
      '#title'=>'descrizione',
      '#default_value'=>$node->body
      ); */


    /* ----------------------------------- */

    /* TODO:set default values */
    $f['nid'] = array(
        '#value' => $node->nid,
    );
    $f['numero_ordine'] = array(
        '#value' => $node->numero_ordine,
    );

    $f['sistema_apparecchiatura'] = array(
        '#title' => 'sistema o apparecchiatura',
        '#type' => 'textfield',
        '#default_value' => $node->sistema_apparecchiatura,
    );

    $qy = db_query('SELECT * FROM tipologia_apparecchiatura');
    while ($rs = db_fetch_object($qy)) {
        $options[$rs->ID] = $rs->tipo_apparecchiatura;
    }
    $f['tipologia_sistema_apparecchiatura'] = array(
        '#title' => 'tipo di sistema/apparecchiatura',
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $node->tipologia_sistema_apparecchiatura,
    );
    $f['reparto_installazione'] = array(
        '#title' => 'id reparto_installazione',
        '#type' => 'select',
        '#options' => get_structure(),
        '#default_value' => $node->reparto_installazione,
    );


    $qy = db_query('SELECT * FROM tipologia_acquisto');
    while ($rs = db_fetch_object($qy)) {
        $options[$rs->ID] = $rs->tipologia_acquisto;
    }
    $f['tipo_acquisizione'] = array(
        '#title' => 'tipo di acquisto (service comodato ecc.)',
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $node->tipo_acquisizione,
    );

//    $f['prezzo_acquisto'] = array(
//        '#title' => 'Prezzo di acquisto',
//        '#type' => 'textfield',
//        '#default_value'=>$node->prezzo_acquisto,
//        '#element_validate'=>array('validate_integer'),
//        '#attributes'=>array('class'=>'integer'),
//        '#size'=>10,
//        '#suffix'=>'<b>&euro;</b>',
//    );
    $f['numero_ordine'] = array(
        '#title' => 'numero di pratica',
        '#type' => 'item',
        '#value' => $node->numero_ordine,
    );

    $f['data_ordine'] = array(
        '#title' => 'Data ordine',
        '#type' => 'date',
        '#default_value' => get_date_array($node->data_ordine),
    );

    $f['n_order'] = array(
        '#title' => 'Numero di ordine ASCOTT',
        '#type' => 'textfield',
        '#default_value' => $node->{'n_order'},
        '#attributes' => array('class' => 'integer'),
    );

    /* TODO: user selection    */
    $f['referente_amministrativo'] = array(
        '#title' => 'riferimento amministrativo della pratica',
        '#type' => 'textfield',
        '#default_value' => $node->referente_amministrativo,
    );


    $f['ditta_produttrice'] = array(
        '#title' => 'ditta_produttrice',
        '#type' => 'textfield',
        '#description' => get_f_address($node->ditta_produttrice),
        '#autocomplete_path' => 'tested/autocomplete/fornitori',
        '#default_value' => $node->ditta_produttrice,
    );
    $f['ditta_fornitrice'] = array(
        '#title' => 'ditta_fornitrice',
        '#type' => 'textfield',
        '#description' => get_f_address($node->ditta_fornitrice),
        '#autocomplete_path' => 'tested/autocomplete/fornitori',
        '#default_value' => $node->ditta_fornitrice,
    );
    $f['ditta_assistenza_tecnica'] = array(
        '#title' => 'ditta assistenza tecnica',
        '#type' => 'textfield',
        '#description' => get_f_address($node->ditta_assistenza_tecnica),
        '#autocomplete_path' => 'tested/autocomplete/fornitori',
        '#default_value' => $node->ditta_assistenza_tecnica,
    );
    $f['note_particolari'] = array(
        '#title' => 'note_particolari',
        '#type' => 'textarea',
        '#rows' => 2,
        '#default_value' => $node->{'note_particolari'},
    );
    $f['note_acquisto'] = array(
        '#title' => 'note acquisto',
        '#type' => 'textarea',
        '#rows' => 2,
        '#default_value' => $node->note_acquisto,
    );
    $f['data_consegna'] = array(
        '#title' => 'consegna',
        '#description' => 'data o indicazione generica della presunta consegna',
        '#type' => 'textfield',
        '#default_value' => $node->data_consegna,
    );
    $f['data_1a_installazione'] = array(
        '#title' => 'data prima installazione',
        '#type' => 'date',
        '#default_value' => get_date_array($node->data_1a_installazione),
    );
    $f['data_verifiche_manutentore'] = array(
        '#title' => 'data verifiche manutentore',
        '#type' => 'date',
        '#default_value' => get_date_array($node->data_verifiche_manutentore)
    );
    $f['data_collaudo'] = array(
        '#title' => 'data termine collaudo e messa in funzione',
        '#type' => 'date',
        '#default_value' => get_date_array($node->data_collaudo)
    );
    $f['contatto_reparto'] = array(
        '#title' => 'contatto reparto',
        '#type' => 'textfield',
        '#size' => 50,
        '#default_value' => $node->contatto_reparto,
    );
    $f['ditta'] = array(
        '#title' => 'ditta',
        '#type' => 'textfield',
        '#size' => 50,
        '#default_value' => $node->{'ditta'},
    );
    $f['reparto'] = array(
        '#title' => 'reparto',
        '#type' => 'textfield',
        '#size' => 50,
        '#default_value' => $node->{'reparto'},
    );
    $f['verificatore'] = array(
        '#title' => 'verificatore',
        '#type' => 'textfield',
        '#size' => 50,
        '#default_value' => $node->{'verificatore'},
    );
    $f['responsabile_sic'] = array(
        '#title' => 'responsabile sic',
        '#type' => 'textfield',
        '#size' => 50,
        '#default_value' => $node->responsabile_sic,
    );
    $f['note_sostituzione_apparecchiature'] = array(
        '#title' => 'note sostituzione apparecchiature',
        '#type' => 'textarea',
        '#rows' => 2,
        '#default_value' => $node->note_sostituzione_apparecchiature,
    );
    $f['note_manutenzione'] = array(
        '#title' => 'note manutenzione',
        '#type' => 'textarea',
        '#rows' => 2,
        '#default_value' => $node->note_manutenzione,
    );


    $f['items'] ['wrapper'] = tested_load_items($node->items); /* da correggere con in node id (nid) */
    // wrapper per la lista degli item caricata via AJAX
    $f['items']['wrapper']['#prefix'] = '<div id="items-wrapper">';
    $f['items']['wrapper']['#suffix'] = '</div>';

    $f['items']['#title'] = 'Apparecchiature collaudate';
    $f['items']['#type'] = 'fieldset';

    $f['items']['#collapsible'] = TRUE;
    $f['items']['#collapsed'] = TRUE;
    $f['items']['#tree'] = TRUE;
    $f['items']['add_item'] = array(
        '#type' => 'button',
        '#value' => 'Aggiungi',
        '#title' => 'azione',
        //              '#src'=>drupal_get_path('module', 'netmanager').'/icons/24x24/add.png',
        '#submit' => array('tested_load_items_submit'),
        '#ahah' => array(
            //           'event'=>'mouseover',
            'path' => 'tested/js/items',
            'wrapper' => 'items-wrapper',
            'method' => 'replace',
            'effect' => 'fade',
            'progress' => array('type' => 'throbber'),
        )
    );


    /*
      'TIMESTAMP' => array('description' => 'marcatura inserimetno campo','type' => 'timestamp','not null' => TRUE,'default' => 'CURRENT_TIMESTAMP',),
      'nid' => array('description' => t('node id reference'),'type' => 'int','not null' => TRUE,'default' => 0,),
      'vid' => array('description' => t('node version id reference'),'type' => 'int','not null' => TRUE,'default' => 0,),
     */

    /* ----------------------------------- */

    $form['tested'] = $f;



    return $form;
}

/**
 * carica la lista delle voci di collaudo legate all'ordine
 * @param array $node_items elenco degli item presenti
 * @return array $form tabella degli item
 */
function tested_load_items($node_items, $add_empty_record = TRUE) {

    if (!isset($node_items) || $node_items === NULL || empty($node_items))
        return array();

    foreach ($node_items as $node_item) {
        $form[] = tested_build_item_row($node_item);
    }
    // aggiunge la riga vuota se richiesto
    if ($add_empty_record) {
        $f = tested_build_item_row(new stdClass());
        if (isset($_POST['items']['wrapper'])) {
            /* i campi post sono attivi quindi è in corso l'aggiornamento ahah (ajax)
             * i campi di defalt vanno quindi immessi anche nel post
             */
            foreach ($f as $key => $value) {
                //recupera i valori di default solo per alcuni campi
                if ($value['#type'] == 'textfield' || $value['#type'] == 'hidden' || $value['#type'] == 'textarea')
                    $post[$key] = $value['#default_value'];
            }
            //i valori di default vengono aggiunti come ultima riga
            $_POST['items']['wrapper'][] = $post;
        }
        $form[] = $f;
    }
    $form['#theme'] = 'tested_items';
    return $form;
}

/**
 * costruisce la form della riga degli item
 * @param array o object $item
 * @return form array
 */
function tested_build_item_row($item) {
    if (is_array($item))
        $item = (object) $item; //converte a oggetto l'item
    $empty_node = !isset($item->ID);
    $f['ID'] = array(
        '#type' => 'hidden',
        '#default_value' => $empty_node ? 'empty' : $item->ID,
    );
    if (!isset($item->ID)) {
        $f['op'] = array(
            '#value' => 'nuovo elemento',
        );
    } else {
        $f['op'] = array(
            '#type' => 'checkbox',
            '#default_value' => FALSE,
            '#title' => 'Cancella',
        );
    }
    $f['nid'] = array(
        '#title' => 'richiesta',
        '#type' => 'textfield',
        '#default_value' => isset($item->nid) ? $item->nid : 0,
        '#attributes' => array('class' => 'integer'),
    );
    $f['quantita'] = array(
        '#title' => 'quantit&agrave;',
        '#type' => 'textfield',
        '#attributes' => array('class' => 'integer'),
        '#size' => 5,
        '#default_value' => isset($item->quantita) ? $item->quantita : 1,
    );
    if (!$empty_node)
        $f['quantita']['#element_validate'] = array('validate_integer');
    $f['apparecchiatura'] = array(
        '#title' => 'apparecchiatura',
        '#type' => 'textfield', '#size' => 50,
        '#default_value' => $item->apparecchiatura,
    );
    $f['produttore'] = array(
        '#title' => 'produttore',
        '#type' => 'textfield', '#size' => 50,
        '#default_value' => $item->produttore,);

    $f['garanzia'] = array(
        '#title' => 'garanzia',
        '#type' => 'textfield',
        '#default_value' => isset($item->garanzia) ? $item->garanzia : 1,
        '#attributes' => array('class' => 'integer'),
        '#size' => 3,);
    if (!$empty_node)
        $f['garanzia']['#element_validate'] = array('validate_integer');
//        $f['reparto'] = array(
//            '#title' => 'reparto',
//            '#type' => 'select',
//            '#options'=> get_structure();
//            '#default_value' => $item->{'reparto'},);
    $f['note_installazione'] = array(
        '#title' => 'Note',
        '#type' => 'textfield', '#size' => 50,
        '#default_value' => $item->{'note_installazione'},);
    $f['modello'] = array(
        '#title' => 'modello',
        '#type' => 'textfield', '#size' => 50,
        '#default_value' => $item->{'modello'},);
    $f['inventario_aziendale'] = array(
        '#title' => 'Inventario',
        '#type' => 'textfield', '#size' => 50,
        '#default_value' => $item->inventario_aziendale,);
    $f['etichetta_manutentore'] = array(
        '#title' => 'Ettichetta',
        '#type' => 'textfield',
        '#attributes' => array('class' => 'integer'),
        '#size' => 12,
        '#default_value' => isset($item->etichetta_manutentore) ? $item->etichetta_manutentore : 0,);
    if (!$empty_node)
        $f['etichetta_manutentore']['#element_validate'] = array('validate_integer');
    $f['matricola'] = array(
        '#title' => 'matricola',
        '#type' => 'textfield', '#size' => 50,
        '#default_value' => $item->matricola,);
    //  $f['TIMESTAMP'] => array('description' => t('TODO: please describe this field!'),'type' => 'timestamp','not null' => TRUE,'default' => 'CURRENT_TIMESTAMP',),
    return $f;
}

function tested_load_items_submit($form, &$form_state) {
    $i = 0;
    return;
}

/**
 * risponditore all'aggiunta dinamica degli items 
 */
function tested_load_items_js() {
    If (isset($_POST['items']['wrapper'])) {
        $items = &$_POST['items']['wrapper'];
        $err = FALSE;
        // verifiche errori 
        foreach ($items as $key => $val) { //verifica e imposta tutti i nodi nuovi aggiunti
            //marca le nuove righe
            if (isset($val['ID']) && $val['ID'] == 'empty')
                $items[$key]['nid'] = $items[$key]['ID'] = 'new';
        }
    }
    $ff = tested_load_items($items);
    $f = rebuilder_items($ff);
//    $err=form_get_errors();
//    if ($err!==NULL){ //se ci sono errori non si inserisce la riga vuota
//        $ff=tested_load_items($items,FALSE); 
//        $f=  rebuilder_items($items);
//    } 
    $output = theme('status_messages');
    $output.=drupal_render($f);
    return drupal_json(array('status' => TRUE, 'data' => $output));
    exit();
}

/**
 *  ricostruisce la griglia degli item con i nuovi inserimenti
 * @param type $items form della griglia
 * @return type 
 */
function rebuilder_items($items) {
    $form_state = array('storage' => NULL, 'submitted' => FALSE); // inizializza lo stato
    $form_build_id = $_POST['form_build_id']; //recupera id form attuale
    $form = form_get_cache($form_build_id, $form_state); //ricostruisce la form attuale
    $args = $form['#parameters'];
    $form_id = array_shift($args); // recupera is form base
    $form_state['post'] = $form['#post'] = $_POST;
    $form_state['#programmed'] = FALSE;
    // Enable the submit/validate handlers to determine whether AHAH-submittted.
    $form_state['ahah_submission'] = TRUE;
    $redirect = $form['#redirect'];
    $form['#programmed'] = $form['#redirect'] = FALSE;
    $form['tested']['items']['wrapper'] = $items; //rimpiazza il wrapper con 
    $form['tested']['items']['wrapper']['#prefix'] = '<div id="items-wrapper">';
    $form['tested']['items']['wrapper']['#suffix'] = '</div>';
//  $f['items']['#collapsible'] = TRUE;
//  $f['items']['#collapsed'] = FALSE;
//  $f['items']['#tree'] = TRUE;
    drupal_process_form($form_id, $form, $form_state);
    $form['#redirect'] = $redirect;
    form_set_cache($form_build_id, $form, $form_state);
    return $form['tested']['items']['wrapper'];
}

/**
 * prepara le variabili per il template con la griglia con l'elenco delle voci di collaudo
 * @param type $variables
 */
function template_preprocess_tested_items(&$variables) {
    $items = &$variables['form'];
    $first = TRUE; // flag per il recupero delle intestazioni
    $variables['headers'] = array();
    $variables['item_rows'] = array();
    foreach (element_children($items) as $item) {

        foreach (element_children($items[$item]) as $field) {
            if ($field == 'ID') {
                $id = $items[$item][$field]['#value'];
                //renderizza l'id per inserirlo nella form come input per ritrovarlo nel post
                $id_rendered = drupal_render($items[$item][$field]);
                continue;
            }
            if ($first)
                $headers[] = $items[$item][$field]['#title'];
            //inserisce l'id assieme a un campo qualsiasi tanto è invisibile
            $row[] = (isset($id_rendered) ? $id_rendered : '') . drupal_render($items[$item][$field]);
            unset($id_rendered); //cancella il campo id che non serve più
        }
        $variables['item_rows'][$id] = $row;
        if (isset($headers)) {// le intestazioni sono state recuperate
            $variables['headers'] = $headers;
            $first = FALSE;
        }
        unset($row);
    }
}

/**
 * organizza i campi per l'inserimento nel template 
 * @param type $variables
 */
function template_preprocess_tested_node_form(&$variables) {
    $variable_list = '';
    if ($form = &$variables['form']['tested']) {//seleziona solo i campi aggiunti dal modulo custom
        foreach (element_children($form) as $elm) {
            $variables[$elm] = drupal_render($form[$elm]);
            $variable_list.= '$' . $elm_name . "\n";
        }
        $variables['variable_list'] = $variable_list;
    }
    $variables['form_close'] = drupal_render($variables['form']);
}

/**
 * ritorna l'array con la data organizzata a campi 
 * @param int $date
 * @return array
 */
function get_date_array($date) {
//    $date=date("Y-m-d H:i:s",$date);
    if ($date == NULL)
        $date = date('D, d M Y H:i:s');
    $date = strtotime($date);
    return array(
        'day' => format_date($date, 'custom', 'j'),
        'month' => format_date($date, 'custom', 'n'),
        'year' => format_date($date, 'custom', 'Y'),
    );
}

function set_date_array($date) {
    return date('Y-m-d H:i:s', mktime(0, 0, 0, $date['month'], $date['day'], $date['year']));
}

function template_preprocess_tested_view(&$variables) {
    if ($form = &$variables['form']) {//seleziona solo i campi aggiunti dal modulo custom
        foreach (element_children($form) as $elm) {
            $variables[$elm] = drupal_render($form[$elm]);
        }
        $variables['variable_list'] = $variable_list;
    }
    $variables['form_close'] = drupal_render($variables['form']);
    return $form;
}

/**
 * Implementation of hook_search().
 */
function tested_search($op = 'search', $keys = NULL) {
    switch ($op) {
//        case 'admin':
        case 'name':
            return 'Apparecchiature';
//        case 'reset':
        case 'search':
            return search_catalogs(trim($keys));
//        case 'status':
    }
    return array();
}

function search_catalogs($keys) {
    $find = array();
    if (preg_match('/[0-9]{4}\/[0-9]+/', $keys, $matches)) { // inventario del tipo nnnn/nnnnnnn
        $find+=search_inventario($matches);
    } else if (is_numeric($keys)) {
        $find+=search_codice($keys);
    } else if (is_string($keys)) {
        $find+=search_description($keys);
    }
    return $find;
}

function riassuntivo_prove() {
    $header[] = array('data' => 'ID GIT', 'field' => 'p.nid');
    $header[] = array('data' => 'Descrizione', 'field' => 'p.sistema-apparecchiatura');
    $header[] = array('data' => 'Struttura', 'field' => 's.description');
    $header[] = array('data' => 'Data', 'field' => 'p.`data ordine`');
    $qy = "SELECT p.nid,p.sistema-apparecchiatura,p.`data ordine`"
            . " FROM grat.`principale di collaudo` p "
            . "LEFT JOIN " . _STRUCT_TABLE . " s ON s.ID=p.`reparto installazione`"
            . " WHERE `tipo acquisizione`=5 " . tablesort_sql($header);
    $qy = db_query($qy);
    while ($rw = db_fetch_object($qy)) {
        $rows[]=(array) $rw;
    }
    return theme('table',$header,$rows);
}